{
  "Data": {
    "ConnectionString": ""
  },
  "AllowedHosts": "*",
  "OpenAIApiKey": "",
  "RedisConnectionString": "",
  "RabbitMQ": {
    "Uri": "",
    "Username": "",
    "Password": ""
  },
  "HotmailConfig": {
    "ImapServer": "imap-mail.outlook.com",
    "ImapPort": 993,
    "SenderEmail": "",
    "Password": "",
    "SenderName": "CognitiveServices Bot"
  },
  "GoogleConfig": {
    "ProjectId": "",
    "StorageBucket": "",
    "SearchApiKey": "",
    "SearchEngineId": "",
    "ServiceAccountPath": "GoogleServiceAccountCredentials.json",
    "OAuthFilePath": "C:\\Users\\lrpm_\\.google\\googleOauth.json",
    "GmailEmailConfig": {
      "SMTPServer": "smtp.gmail.com",
      "SMTPPort": 587,
      "SenderEmail": "",
      "Password": "",
      "SenderName": "CognitiveServices Bot"
    }
  },
  "FfmpegBinaryFolderPath": "C:\\FFmpeg\\bin",
  "SemanticMemory": {
    "Service": {
      // Whether to run the web service that allows to upload files and search memory
      // Use these booleans to deploy the web service and the handlers on same/different VMs
      "RunWebService": true,
      // Whether to run the asynchronous pipeline handlers
      // Use these booleans to deploy the web service and the handlers on same/different VMs
      "RunHandlers": true,
      // Whether to expose OpenAPI swagger UI
      "OpenApiEnabled": false
    },
    // "AzureBlobs" or "SimpleFileStorage"
    "ContentStorageType": "SimpleFileStorage",
    // "AzureOpenAIText" or "OpenAI"
    "TextGeneratorType": "OpenAI",
    // "None" or "AzureFormRecognizer"
    "ImageOcrType": "None",
    // Data ingestion pipelines configuration.
    "DataIngestion": {
      // - InProcess: in process .NET orchestrator, synchronous/no queues
      // - Distributed: asynchronous queue based orchestrator
      "OrchestrationType": "Distributed",
      "DistributedOrchestration": {
        // "AzureQueue", "RabbitMQ", "SimpleQueues"
        "QueueType": "RabbitMQ"
      },
      // Multiple generators can be used, e.g. for data migration, A/B testing, etc.
      "EmbeddingGeneratorTypes": [
        "OpenAI" //"AzureOpenAIEmbedding"
      ],
      // Vectors can be written to multiple storages, e.g. for data migration, A/B testing, etc.
      "VectorDbTypes": [
        "Qdrant" //"AzureCognitiveSearch"
      ]
    },
    "Retrieval": {
      // "AzureCognitiveSearch" or "Qdrant"
      "VectorDbType": "Qdrant",
      // "AzureOpenAIEmbedding" or "OpenAI"
      "EmbeddingGeneratorType": "OpenAI"
    },
    "Services": {
      "SimpleFileStorage": {
        "Directory": "tmp-content-storage"
      },
      "SimpleQueues": {
        "Directory": "tmp-queues"
      },
      "SimpleVectorDb": {
        "Directory": "tmp-vector-db"
      },
      "AzureBlobs": {
        // "ConnectionString" or "AzureIdentity". For other options see <AzureBlobConfig>.
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "AzureIdentity",
        // Azure Storage account name, required when using AzureIdentity auth
        // Note: you can use an env var 'SemanticMemory__Services__AzureBlobs__Account' to set this
        "Account": "",
        // Container where to create directories and upload files
        "Container": "smemory",
        // Required when Auth == ConnectionString
        // Note: you can use an env var 'SemanticMemory__Services__AzureBlobs__ConnectionString' to set this
        "ConnectionString": "",
        // Setting used only for country clouds
        "EndpointSuffix": "core.windows.net"
      },
      "AzureQueue": {
        // "ConnectionString" or "AzureIdentity". For other options see <AzureQueueConfig>.
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "AzureIdentity",
        // Azure Storage account name, required when using AzureIdentity auth
        // Note: you can use an env var 'SemanticMemory__Orchestration__DistributedPipeline__AzureQueue__Account' to set this
        "Account": "",
        // Required when Auth == ConnectionString
        // Note: you can use an env var 'SemanticMemory__Orchestration__DistributedPipeline__AzureQueue__ConnectionString' to set this
        "ConnectionString": "",
        // Setting used only for country clouds
        "EndpointSuffix": "core.windows.net"
      },
      "RabbitMq": {
        "Host": "",
        "Port": "5672",
        "Username": "",
        "Password": ""
      },
      "AzureCognitiveSearch": {
        // "ApiKey" or "AzureIdentity". For other options see <AzureCognitiveSearchConfig>.
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "AzureIdentity",
        "Endpoint": "https://<...>",
        "APIKey": ""
      },
      "Qdrant": {
        "Endpoint": "http://127.0.0.1:6333",
        "APIKey": ""
      },
      "AzureOpenAIText": {
        // "ApiKey" or "AzureIdentity"
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "AzureIdentity",
        "Endpoint": "https://<...>.openai.azure.com/",
        "Deployment": "",
        "APIKey": "",
        // "ChatCompletion" or "TextCompletion"
        "APIType": "ChatCompletion",
        "MaxRetries": 10
      },
      "AzureOpenAIEmbedding": {
        // "ApiKey" or "AzureIdentity"
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "AzureIdentity",
        "Endpoint": "https://<...>.openai.azure.com/",
        "Deployment": "",
        "APIKey": ""
      },
      "OpenAI": {
        "TextModel": "gpt-3.5-turbo-16k",
        "EmbeddingModel": "text-embedding-ada-002",
        "APIKey": "",
        "OrgId": "",
        "MaxRetries": 5
      },
      "AzureFormRecognizer": {
        // "ConnectionString" or "AzureIdentity". For other options see <AzureBlobConfig>.
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "AzureIdentity",
        // Required when Auth == APIKey
        "APIKey": "",
        "Endpoint": ""
      }
    }
  }
}
